import UIKit

/**
 -----------------------------------------------------------------
 便利な数値関数
 切り捨て、切り上げ、四捨五入などを行う関数
 小数点以下の切り捨て、切り上げ、四捨五入は、`floor(数値)`、`ceil(数値)`
 、`round(数値)`を使う。

 任意の桁での切り捨てや切り上げなどを行いたい場合は、先に値を10で割って桁をずらし
 て計算し、その値を10倍にして桁を戻す。
 -----------------------------------------------------------------
 */
切り捨て_切り上げ_四捨五入を行う関数 : do {
    let price = 3520 * 1.24

    切り捨て_切り上げ_四捨五入を行う: do {
        print("切り捨て : \(floor(price))")     // 4364.0
        print("切り上げ : \(ceil(price))")      // 4365.0
        print("四捨五入 : \(round(price))")     // 4365.0
    }

    一桁目を切り捨て_切り上げ_四捨五入する : do {
        print("切り捨て : \(floor(price / 10) * 10)")       // 4360.0
        print("切り上げ : \(ceil(price/10) * 10)")          // 4370.0
        print("四捨五入 : \(round(price / 10) * 10)")       // 4360.0
    }
}

/**
 -----------------------------------------------------------------
 大きい方の値、小さい方の値を取り出す
 a, b 2個の数値を比較して`max(a, b)`は大きい方の値、`min(a, b)`は小さい方の値
 を選び出す。

 配列の中から最大値、最小値を選び出したい場合もmax(), min()を実行することで値を選び
 出せる。ただし、配列が空の場合を考慮する必要があるため、
 `結果はOptional型でラップされている。`値が必ず入っているなら`!`を付けて強制的
 にアンラップすることができる。
 -----------------------------------------------------------------
 */
大きい方の値_小さい方の値を取り出す : do {
    print("大きい方の値を取り出す : \(max(5, 9))")     // 9
    print("小さい方の値を取り出す : \(min(5, 9))")     // 5
}

minとmaxを組み合わせて使う: do {
    var v1 = -10, v2 = 20
    print(min(max(v1, 0), 10))      // 0
    print(min(max(v2, 0), 10))      // 10
}

配列の最大値と最小値 : do {
    let nums = [4, 2, 6, 8, 5]
    print("配列から最大値を取り出す : \(nums.max()!)")      // 8
    print("配列から最小値を取り出す : \(nums.min()!)")      // 2
}

/**
 -----------------------------------------------------------------
 絶対値に変換する
 数値の大きさ（絶対値）を求めたいときは`abs()`関数を使う。abs()を使うと、a, b のど
 ちらが大きくてもその差は正の値になる。
 -----------------------------------------------------------------
 */
_2つの値の間隔を求める : do {
    print("差分 : \(abs(16.5 - 18))")     // 1.5
}
